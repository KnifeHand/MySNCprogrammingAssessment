/**
 * This class computes all travel data for a boat and a car. The add methods create
 * a new trip for the perspective vehicle type when they are invoked from the main
 * method in the WaypointGenerator class. The FOR loops help control the flow of
 * how the trip is created by gathering random generated coordinates, direction
 * and speed to calculate new coordinates generated by the getNewCoordinatesData()
 * method.
 *
 * @author: Matt Hurt
 *
 */

import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Random;

public class TripData {
    public static double newBearing;
    public static double carSpeed = 70; // feet per second
    public static double boatSpeed = 30;
    public static double startLat2;
    public static double startLong2;
    public static float startTime;
    public static float newTime;
    public static Zone check = new Zone();

    public static class EndingCoordinatesData {
        public double endLatitude;
        public double endLongitude;
    }

    /**
     * This method creates gathers all of the data needed to generate new
     * coordinates for the vehicle waypoint destinations. Once the data has been
     * collected and generated, the information about the trip data is
     * written to a text file.
     *
     * @param startLat - Car's starting position latitude coordinates.
     * @param startLong - Car's starting position longitude coordinates.
     * @param bearing - Car's start heading.
     * @param distFeet - Car's starting distance (default to 0 initial feet).
     * @param vic - Type vehicle needed for trip data.
     * @throws IOException - If unhandled file I/O occurs.
     */
    public static void addCarTrip(double startLat, double startLong,
                                  double bearing, double distFeet, Vehicle vic) throws IOException{

        FileWriter fileWriter = new FileWriter("CarWaypoints.txt");
        PrintWriter output = new PrintWriter(fileWriter);
        output.write(String.valueOf(vic + "\n"));
        output.write(startLat + ", " + startLong + ", " + startTime + "\n");
        distFeet = randomDistGenCar(0);
        getNewCoordinatesData(startLat, startLong, bearing, distFeet);

        for (int i = 0; i < 15; i++) {
            randomCarBearingGen(bearing);
            getNewCoordinatesData(startLat2, startLong2, newBearing, distFeet);
            check.checkZone(startLat2, startLong2, vic);
            carSpeed = randomCarSpeed();
            timeSinceCarLastPoint(distFeet, carSpeed, startTime);
            startTime = newTime;
            output.write(startLat2 + ", " + startLong2 + ", " + newTime + "\n");
        }
        output.close();
    }

    /**
     * This method creates gathers all of the data needed to generate new
     * coordinates for the vehicle waypoint destinations. Once the data has been
     * collected and generated, the information about the trip data is
     * written to a text file that lists the longitude, latitude and length of
     * time the vehicle took to travel to the destination.
     *
     * @param startLat - Boat's starting position latitude coordinates.
     * @param startLong - Boat's starting position longitude coordinates.
     * @param bearing - Boat's start heading.
     * @param distFeet - Boat's starting distance (default to 0 initial feet).
     * @param vic - Type vehicle needed for trip data.
     * @throws IOException - If unhandled file I/O occurs.
     */
    public static void addBoatTrip(double startLat, double startLong,
                                   double bearing, double distFeet, Vehicle vic) throws Exception {
        FileWriter fileWriter = new FileWriter("BoatWaypoints.txt");
        PrintWriter output = new PrintWriter(fileWriter);
        output.write(vic +"\n");
        output.write(startLat + ", " + startLong + ", " + startTime + "\n");
        distFeet = randomDistGenBoat(0);
        getNewCoordinatesData(startLat, startLong, bearing, distFeet);

        for (int i = 0; i < 15; i++) {
            randomBoatBearingGen(bearing);
            getNewCoordinatesData(startLat2, startLong2, newBearing, distFeet);
            check.checkZone(startLat2, startLong2, vic);
            boatSpeed = randomBoatSpeed();
            timeSinceBoatLastPoint(distFeet, boatSpeed, startTime);
            startTime = newTime;
            output.write(startLat2 + ", " + startLong2 + ", " + newTime + "\n");
        }
        output.close();
    }

    /**
     * This method generates new coordinates for all vehicles types using the
     * GeoCalc class. The calculation facilitates a new waypoint for the add
     * methods to print future waypoints.
     *
     * @param Lat - Receives current Latitude coordinates.
     * @param Long - Receives current Longitude coordinates.
     * @param bearing - Receives current heading.
     * @param dist - Receives distance traveled.
     * @return - New geo location coordinates of vehicle.
     */
    public static EndingCoordinatesData getNewCoordinatesData(double Lat, double Long,
                                                              double bearing, double dist) {
        GeoCalc.EndingCoordinateData calc = GeoCalc.getEndingCoordinates(
                Lat, Long, bearing, dist);

        EndingCoordinatesData newCoordinates = new EndingCoordinatesData();

        newCoordinates.endLatitude = calc.endLatitude;
        newCoordinates.endLongitude = calc.endLongitude;

        startLat2 = newCoordinates.endLatitude;
        startLong2 = newCoordinates.endLongitude;

        return newCoordinates;
    }

    public static double randomCarBearingGen(double oldBearing) {
        double min = -90.0;
        double max = 90.0;
        Random rand = new Random();
        double newBearingValue = min + (max - min) * rand.nextDouble();
        newBearing = oldBearing + newBearingValue;

        if (newBearing > 360.0) {
            newBearing = newBearing - 360;
        }
        if (newBearing < 0.0) {
            newBearing = newBearing + 360;
        }

        return newBearing;
    }

    /**
     * A random bearing is created to facilitate a new heading for the boat. Boat's
     * have the restriction of turning up to 30 degrees. The new bearing is passed
     * to the GeoCalc class to generate new coordinates for future waypoint creation.
     *
     * @param oldBearing - Receives current last heading of boat.
     * @return New randomly generated heading for boat.
     */
    public static double randomBoatBearingGen(double oldBearing) {
        double min = -30.0;
        double max = 30;
        Random rand = new Random();
        double newBearingValue = min + (max - min) * rand.nextDouble();
        newBearing = oldBearing + newBearingValue;

        if (newBearing > 360.0) {
            newBearing = newBearing - 360;
        }
        if (newBearing < 0.0) {
            newBearing = newBearing + 360;
        }
        return newBearing;
    }

    public static double randomDistGenCar(double dist) {
        double min = dist;
        double max = 21120.0;
        Random random = new Random();
        double distanceTraveled = min + (max - min) * random.nextDouble();
        return distanceTraveled;
    }

    /**
     * A random distance is generated to simulate the distance traveled between
     * waypoints. New distance is passed to GeoCalc to generate new coordinates
     * for future waypoint creation.
     *
     * @param dist - Receives current distance of boat.
     * @return - New randomly generated distance of boat.
     */
    public static double randomDistGenBoat(double dist) {
        double min = dist;
        double max = 5280.0;
        Random random = new Random();
        double distanceTraveled = min + (max - min) * random.nextDouble();
        return distanceTraveled;
    }

    /**
     * Randomized vehicle speed.
     *
     * @return - New randomly generated speed for car.
     */
    private static double randomCarSpeed() {
        double min = 25;
        double max = 60;
        Random r = new Random();
        double newSpeed = min + (max - min) * r.nextDouble();
        return newSpeed;
    }

    /**
     * Randomized vehicle speed.
     *
     * @return - New random generated speed for boat.
     */
    private static double randomBoatSpeed() {
        double min = 25;
        double max = 60;
        Random r = new Random();
        double newSpeed = min + (max - min) * r.nextDouble();
        return newSpeed;
    }
    /**
     * Time is calculated for the trip between last and current waypoint.
     *
     * @param distanceTraveled - Receives distance traveled by vehicle
     * @param carSpeed - Receives speed of car.
     * @param startTime - Receives the time of the car's last position.
     * @return - Calculated time of travel from last waypoint.
     */
    public static float timeSinceCarLastPoint(double distanceTraveled, double carSpeed, float startTime) {
        float timeElapsed = startTime + ((float) (distanceTraveled / carSpeed));
        newTime = timeElapsed;

        return timeElapsed;
    }

    /**
     * Time is calculated for the trip between last and current waypoint.
     *
     * @param distanceTraveled - Receives distance traveled by vehicle
     * @param boatSpeed - Receives speed of boat.
     * @param startTime - Receives the time of the boat's last position.
     * @return - Calculated time of travel from last waypoint.
     */
    private static float timeSinceBoatLastPoint(double distanceTraveled, double boatSpeed, float startTime) {
        float timeElapsed = startTime + ((float) (distanceTraveled / carSpeed));
        newTime = timeElapsed;

        return timeElapsed;
    }
}
